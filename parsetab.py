
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'AECAC0825BB54917F34FE503E2E8F0E0'
    
_lr_action_items = {'RPAREN':([1,2,3,4,5,6,8,9,14,17,20,22,23,24,25,26,27,],[-12,-10,-18,-17,-6,-14,-3,-16,23,-9,-13,-11,-15,-8,-7,-4,-5,]),'DIVIDE':([1,2,3,4,5,6,8,9,17,20,22,23,24,25,26,27,],[-12,-10,-18,-17,-6,-14,15,-16,-9,-13,-11,-15,-8,-7,15,15,]),'POWER':([1,2,3,4,5,6,9,17,20,22,23,24,25,],[-12,-10,-18,-17,13,-14,-16,13,-13,-11,-15,13,13,]),'NUMBER':([0,1,2,3,4,5,6,7,8,9,11,13,15,16,17,18,19,20,21,22,23,24,25,26,27,],[3,-12,-10,-18,-17,-6,-14,3,3,-16,3,3,3,3,-9,3,3,-13,3,-11,-15,-8,-7,3,3,]),'TIMES':([1,2,3,4,5,6,8,9,17,20,22,23,24,25,26,27,],[-12,-10,-18,-17,-6,-14,16,-16,-9,-13,-11,-15,-8,-7,16,16,]),'EQUALS':([1,2,3,4,5,6,8,9,10,12,17,20,22,23,24,25,26,27,28,],[-12,-10,-18,-17,-6,-14,-3,-16,-1,21,-9,-13,-11,-15,-8,-7,-4,-5,-2,]),'PLUS':([1,2,3,4,5,6,8,9,10,14,17,20,22,23,24,25,26,27,28,],[-12,-10,-18,-17,-6,-14,-3,-16,18,18,-9,-13,-11,-15,-8,-7,-4,-5,18,]),'LPAREN':([0,1,2,3,4,5,6,7,8,9,13,15,16,17,18,19,20,21,22,23,24,25,26,27,],[7,-12,-10,-18,-17,-6,-14,7,7,-16,7,7,7,-9,7,7,-13,7,-11,-15,-8,-7,7,7,]),'VARIABLE':([0,1,2,3,4,5,6,7,8,9,11,13,15,16,17,18,19,20,21,22,23,24,25,26,27,],[4,-12,-10,-18,-17,-6,-14,4,4,-16,4,4,4,4,-9,4,4,-13,4,-11,-15,-8,-7,4,4,]),'MINUS':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,],[11,-12,-10,-18,-17,-6,-14,11,11,-16,19,11,19,11,11,-9,11,11,-13,11,-11,-15,-8,-7,11,11,19,]),'$end':([1,2,3,4,5,6,8,9,10,12,17,20,22,23,24,25,26,27,28,],[-12,-10,-18,-17,-6,-14,-3,-16,-1,0,-9,-13,-11,-15,-8,-7,-4,-5,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'constant':([0,7,8,11,13,15,16,18,19,21,26,27,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'unary_expression':([0,7,8,13,15,16,18,19,21,26,27,],[2,2,2,22,2,2,2,2,2,2,2,]),'exp_expression':([0,7,8,15,16,18,19,21,26,27,],[5,5,17,24,25,5,5,5,17,17,]),'paren_expression':([0,7,8,13,15,16,18,19,21,26,27,],[1,1,1,1,1,1,1,1,1,1,1,]),'mult_expression':([0,7,18,19,21,],[8,8,26,27,8,]),'variable':([0,7,8,11,13,15,16,18,19,21,26,27,],[6,6,6,20,6,6,6,6,6,6,6,6,]),'add_expression':([0,7,21,],[10,14,28,]),'equality_expression':([0,],[12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> equality_expression","S'",1,None,None,None),
  ('equality_expression -> add_expression','equality_expression',1,'p_equality_expression_1','parser.py',9),
  ('equality_expression -> equality_expression EQUALS add_expression','equality_expression',3,'p_equality_expression_2','parser.py',15),
  ('add_expression -> mult_expression','add_expression',1,'p_add_expression_1','parser.py',21),
  ('add_expression -> add_expression PLUS mult_expression','add_expression',3,'p_add_expression_2','parser.py',27),
  ('add_expression -> add_expression MINUS mult_expression','add_expression',3,'p_add_expression_2','parser.py',28),
  ('mult_expression -> exp_expression','mult_expression',1,'p_mult_expression_1','parser.py',34),
  ('mult_expression -> mult_expression TIMES exp_expression','mult_expression',3,'p_mult_expression_2','parser.py',40),
  ('mult_expression -> mult_expression DIVIDE exp_expression','mult_expression',3,'p_mult_expression_2','parser.py',41),
  ('mult_expression -> mult_expression exp_expression','mult_expression',2,'p_mult_expression_3','parser.py',47),
  ('exp_expression -> unary_expression','exp_expression',1,'p_exp_expression_1','parser.py',53),
  ('exp_expression -> exp_expression POWER unary_expression','exp_expression',3,'p_exp_expression_2','parser.py',59),
  ('unary_expression -> paren_expression','unary_expression',1,'p_unary_expression_1','parser.py',65),
  ('unary_expression -> MINUS variable','unary_expression',2,'p_unary_expression_2','parser.py',71),
  ('paren_expression -> variable','paren_expression',1,'p_paren_expression_1','parser.py',77),
  ('paren_expression -> LPAREN add_expression RPAREN','paren_expression',3,'p_paren_expression_2','parser.py',83),
  ('variable -> constant','variable',1,'p_variable_1','parser.py',89),
  ('variable -> VARIABLE','variable',1,'p_variable_2','parser.py',95),
  ('constant -> NUMBER','constant',1,'p_constant','parser.py',102),
]
